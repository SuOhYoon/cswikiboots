<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.spring.cswiki.dao.DocDAO">
    <select id="selectAll" resultType="com.spring.cswiki.domain.Category">
        SELECT id, name, parent_id, d_num FROM category where disable = 0;
    </select>

    <!-- 문서번호 접속시 접속날짜 업데이트 -->
    <update id="setDocTimeNum">
        UPDATE doc SET d_num = #{d_num}, lastvisit = #{lastVisit} WHERE d_num = #{d_num}
    </update>
    <!-- 문서제목 접속시 접속날짜 업데이트-->
    <update id="setDocTimeTitle">
        UPDATE doc SET d_title = #{d_title}, lastvisit = #{lastVisit} WHERE d_title = #{d_title}
    </update>

    <!-- 문서 상세정보 -->
    <select id="doc" resultType="com.spring.cswiki.domain.Doc">
        SELECT d_num, d_title, d_content, p_read, p_update, p_delete FROM doc where d_num = #{d_num}
    </select>

    <!-- 문서에 댓글 추가하기 -->
    <insert id="writeComment">
        INSERT INTO comment (u_id, d_num, cm_comment, cm_time)
        VALUES (#{u_id}, #{d_num}, #{cm_comment}, #{cm_time});
    </insert>

    <!-- 문서에 달린 댓글 읽어오기 -->
    <select id="readComment" resultType="com.spring.cswiki.domain.Comment">
        SELECT * FROM comment WHERE d_num = #{d_num};
    </select>

    <!-- 댓글 번호로 댓글 찾기 -->
    <select id="selectComment" resultType="com.spring.cswiki.domain.Comment">
        SELECT * FROM comment WHERE cm_num = #{cm_num};
    </select>

    <!-- 댓글 수정하기 -->
    <update id="updateComment">
        UPDATE comment SET cm_comment = #{cm_comment}, cm_time = #{cm_time} WHERE cm_num = #{cm_num};
    </update>

    <delete id="deleteComment">
        DELETE FROM comment
        WHERE cm_num = #{cm_num} AND d_num = #{d_num};
    </delete>

    <!-- 새 문서 작성 -->
    <insert id="create" useGeneratedKeys="true" keyProperty="d_num">
        INSERT INTO doc (p_read, p_insert, p_update, p_delete, d_title, d_content, d_summary, d_available, lastvisit)
        VALUES (1, 2, 2, 2, #{d_title}, #{d_content}, #{d_summary}, 1, null);
    </insert>

    <!-- 문서 작성 시 2단계 카테고리 선택 -->
    <select id="selectcategory">
        select * from small_category
    </select>
    <!-- 새 문서 작성 시 역사 생성 -->
    <insert id="createDocHistory" useGeneratedKeys="true" keyProperty="d_num">
        INSERT INTO doc_history (d_version, d_num, d_date, u_id, d_summary, d_content)
        VALUES (#{d_version}, #{d_num}, SYSDATE(), #{u_id}, #{d_summary}, #{d_content})
    </insert>

    <!-- 문서 편집 -->
    <update id="edit">
        UPDATE doc
        SET
            d_title = #{d_title},
            d_content = #{d_content},
            d_summary = #{d_summary},
            u_id = #{u_id}
        WHERE d_num = #{d_num}
    </update>

    <!-- 문서 편집 시 카테고리 업데이트 -->
    <update id="categoryedit">
        UPDATE category
        SET
            name = #{name},
            d_num = #{d_num},
            parent_id = #{id}
        WHERE d_num = #{d_num}
    </update>

    <!-- ACL 삽입/수정 -->
    <update id="acl">
        UPDATE doc
        SET p_read = #{p_read},
            p_update = #{p_update},
            p_delete = #{p_delete}
        WHERE d_num = #{d_num}
    </update>

    <!-- ACL 초기화-->
    <update id="aclwipe">
        UPDATE doc
        SET p_read = 1
            p_update = 2
        p_delete = 2
        WHERE d_num = #{d_num}
    </update>

    <!-- 문서 편집시 역사 새로 삽입 -->
    <insert id="edithistory">
        INSERT INTO doc_history (d_num, d_version, d_date, u_id, d_summary, d_content)
        SELECT #{d_num}, (SELECT IFNULL(MAX(d_version), 0) FROM doc_history WHERE d_num = #{d_num}) + 1, SYSDATE(), #{u_id}, #{d_summary}, #{d_content}
        FROM doc
        WHERE d_num = #{d_num}
    </insert>

    <!-- 문서 삭제  -->
    <update id="delete">
        UPDATE doc
        SET d_available = 0, d_content = '삭제된 문서입니다.'
        WHERE d_num = #{d_num}
    </update>

    <!-- 문서 검색 -->
    <select id="search" resultType="com.spring.cswiki.domain.Doc">
        SELECT * FROM doc WHERE d_title = #{d_title};
    </select>

    <!-- 문서 역사  -->
    <select id="getDocHistory" resultType="com.spring.cswiki.domain.DocHistory">
        SELECT d.d_num, d.d_content, dh.d_version, dh.d_date, dh.d_summary, dh.u_id
        FROM doc d
                 JOIN doc_history dh ON d.d_num = dh.d_num
        WHERE d.d_num = #{d_num} AND d_available = 1
        ORDER BY d_date DESC
    </select>

    <!-- 버전별 내용 확인 -->
    <select id="version" resultType="com.spring.cswiki.domain.Doc">
        SELECT d.d_num, d.d_title, d.p_read, d.p_insert, d.p_update, d.p_delete, dh.d_content, dh.d_version, dh.d_date, dh.d_summary, dh.u_id
        FROM doc d
                 JOIN doc_history dh ON d.d_num = dh.d_num
        WHERE d.d_num = #{d_num} AND d_available = 1 AND dh.d_version = #{d_version} order by dh.d_version DESC
    </select>

    <!-- 즐겨찾기 등록 -->
    <insert id="starin">
        INSERT INTO star (star, u_id, d_num, editdoc)
        VALUES (star, #{u_id}, #{d_num}, 0);
    </insert>

    <!-- 즐겨찾기 삭제 -->
    <delete id="starout">
        DELETE FROM star
        WHERE u_id = #{id} AND d_num = #{d_num}
    </delete>

    <!-- 즐겨찾기 된 문서의 방문정보 출력-->
    <select id="getDocTimeTitle">
        SELECT lastvisit FROM doc WHERE d_title=#{d_title}
    </select>
    <!-- 즐겨찾기 된 문서 출력 -->
    <select id="userstar" resultType="com.spring.cswiki.domain.Doc">
        SELECT * FROM doc WHERE d_num IN (SELECT d_num FROM star WHERE u_id=#{u_id})
    </select>

    <!-- 즐겨찾기 횟수가 가장 많은 문서 출력 -->
    <select id="popular" resultType="com.spring.cswiki.domain.Doc">
        SELECT d.d_num, d.d_title, d.p_read, d.p_insert, d.p_update, d.p_delete, s.star_count, s.star
        FROM doc d
                 JOIN (
            SELECT d_num, MAX(star) AS star, COUNT(star) AS star_count
            FROM star
            GROUP BY d_num
        ) s ON d.d_num = s.d_num
        ORDER BY s.star_count DESC LIMIT 4;
    </select>

    <!-- 카테고리 테스트 코드 -->
    <!-- 최근에 수정됬던 문서 출력 -->
    <select id="selectRecent" resultType="com.spring.cswiki.domain.DocHistory">
        SELECT dh.*, d.d_title
        FROM doc_history dh
                 JOIN cswiki.doc d ON dh.d_num = d.d_num
        WHERE (dh.d_num, dh.d_version, dh.d_date) IN (
            SELECT dh2.d_num, MAX(dh2.d_version), MAX(dh2.d_date)
            FROM cswiki.doc_history dh2
            GROUP BY dh2.d_num
        ) AND dh.d_version = 1
        ORDER BY dh.d_date DESC
            LIMIT 4;
    </select>
    <!-- 1단계 카테고리 생성 -->
    <insert id="insertFirstCategory">
        INSERT INTO category(id, name) VALUES(#{id}, #{name})
    </insert>
    <!-- 2단계 카테고리 생성 -->
    <insert id="insertSecondCategory">

        INSERT INTO category
        (
            id,
            name,
            parent_id
        )
        VALUES
            (
                #{id}
            ,#{name}
            ,#{parent_id}
            )
    </insert>
    <!-- 3단계 카테고리(문서 목록) 생성 -->
    <insert id="insertThirdCategory">
        INSERT INTO category(id, name, parent_id, d_num)
        VALUES(#{id}, #{name}, #{parent_id} ,#{d_num})
    </insert>

    <!-- 1단계 카테고리 중 마지막 카테고리 가져오기 -->
    <select id="selectFirstCategory" resultType="com.spring.cswiki.domain.Category">
        SELECT * FROM cswiki.category where parent_id IS NULL ORDER BY idx DESC LIMIT 1;
    </select>

    <!-- 2단계 카테고리 중 마지막 카테고리 가져오기 -->
    <select id="selectSecondCategory" resultType="com.spring.cswiki.domain.Category">
        SELECT * FROM cswiki.category where parent_id = #{parent_id} ORDER BY idx DESC LIMIT 1;
    </select>

    <!-- 2단계 카테고리에 해당하는 문서 목록 가져오기 -->
    <select id="selectByCategoryId" resultType="com.spring.cswiki.domain.Category">
        SELECT parent_id, id, name FROM category WHERE d_num = #{d_num};
    </select>

    <!-- 부모 ID와 일치하는 3단계 카테고리의 마지막 문서 가져오기 -->
    <select id="selectThirdCategoryByParentId" resultType="com.spring.cswiki.domain.Category">
        SELECT * FROM category WHERE parent_id = #{parent_id} ORDER BY idx DESC LIMIT 1;
    </select>

    <!-- 카테고리 수정 -->
    <update id="updateCategory">
        UPDATE category
        SET name = #{name}
        WHERE
            id = #{id}
    </update>
    <!-- 카테고리 삭제 -->
    <delete id="deleteCategory">
        DELETE from category
        WHERE id = #{id}
    </delete>

    <!-- 즐겨찾기 등록한 유저 찾기 -->
    <select id="starUsers" resultType="com.spring.cswiki.domain.Star">
        SELECT * FROM star WHERE d_num = #{d_num};
    </select>

    <!-- 문서 변경시 변경됨을 표시 -->
    <update id="editDoc">
        UPDATE star SET editdoc = 1 WHERE d_num = #{d_num};
    </update>
</mapper>