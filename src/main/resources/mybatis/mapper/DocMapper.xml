<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.spring.cswiki.dao.DocDAO">
    <select id="selectAll" resultType="com.spring.cswiki.domain.Category">
        SELECT id, name, parent_id, d_num FROM category;
    </select>

    <!-- 1단계 분류
    <select id="list" resultType="com.spring.cswiki.domain.BigCategory">
        SELECT
        b_ca_name, b_ca_num
        FROM big_category WHERE b_ca_avaliable = 1
    </select>

    &lt;!&ndash; 2단계 분류 &ndash;&gt;
    <select id="s_category" resultType="com.spring.cswiki.domain.SmallCategory">
        SELECT s_ca_name, s_ca_num FROM small_category WHERE b_ca_num = #{b_ca_num} and s_ca_avaliable = 1
    </select>

    &lt;!&ndash; 1단계 분류 추가 &ndash;&gt;
    <insert id="createbigcategory" useGeneratedKeys="true" keyProperty="b_ca_num">
        INSERT INTO big_category (b_ca_name, b_ca_avaliable)
        VALUES (#{b_ca_name}, 1)
    </insert>
    &lt;!&ndash; 2단계 분류 추가 &ndash;&gt;
    <insert id="createsmallcategory" useGeneratedKeys="true" keyProperty="s_ca_num">
        INSERT INTO small_category (s_ca_name, b_ca_num, s_ca_avaliable)
        VALUES (#{s_ca_name}, #{b_ca_num}, 1)
    </insert>
    &lt;!&ndash; 문서 리스트 &ndash;&gt;
    <select id="doc_list" resultType="com.spring.cswiki.domain.Doc">
        SELECT d_title, d_num FROM doc WHERE s_ca_num = #{s_ca_num} AND d_available = 1
    </select>-->

    <!-- 문서번호 접속시 접속날짜 업데이트 -->
    <update id="setDocTimeNum">
        UPDATE doc SET d_num = #{d_num}, lastvisit = #{lastVisit} WHERE d_num = #{d_num}
    </update>
    <!-- 문서제목 접속시 접속날짜 업데이트-->
    <update id="setDocTimeTitle">
        UPDATE doc SET d_title = #{d_title}, lastvisit = #{lastVisit} WHERE d_title = #{d_title}
    </update>

    <!-- 문서 상세정보 -->
    <select id="doc" resultType="com.spring.cswiki.domain.Doc">
        SELECT d_num, d_title, d_content, p_read, p_update, p_delete FROM doc where d_num = #{d_num}
    </select>

    <update id="setDocTime">
        UPDATE doc (d_num, lastvisit) VALUES (#{dto.getD_num()}, #{lastVisit});
    </update>

    <!-- 새 문서 작성 -->
    <insert id="create" useGeneratedKeys="true" keyProperty="d_num">
        INSERT INTO doc (p_read, p_insert, p_update, p_delete, d_title, d_content, d_summary, d_available, lastvisit)
        VALUES (1, 2, 2, 2, #{d_title}, #{d_content}, #{d_summary}, 1, null);
    </insert>

    <!-- 문서 작성 시 2단계 카테고리 선택 -->
    <select id="selectcategory">
        select * from small_category
    </select>
    <!-- 새 문서 작성 시 역사 생성 -->
    <insert id="createDocHistory" useGeneratedKeys="true" keyProperty="d_num">
        INSERT INTO doc_history (d_version, d_num, d_date, u_id, d_summary, d_content)
        VALUES (#{d_version}, #{d_num}, SYSDATE(), #{u_id}, #{d_summary}, #{d_content})
    </insert>

    <!-- 문서 편집 시 해당하는 분류 가져오기 -->
    <select id="getcategory" resultType="com.spring.cswiki.domain.SmallCategory">
        SELECT s_ca_num, s_ca_name FROM small_category WHERE s_ca_num IN(SELECT s_ca_num FROM doc WHERE d_num = #{d_num});
    </select>

    <!-- 문서 편집 -->
    <update id="edit">
        UPDATE doc
        SET
        s_ca_num = #{s_ca_num},
        d_title = #{d_title},
        d_content = #{d_content},
        d_summary = #{d_summary},
        u_id = #{u_id}
        WHERE d_num = #{d_num}
    </update>

    <!-- 문서 편집 시 카테고리 업데이트 -->
    <update id="categoryedit">
        UPDATE category
        SET
            name = #{name},
            d_num = #{d_num},
            parent_id = #{id}
        WHERE d_num = #{d_num}
    </update>

    <!-- ACL 삽입/수정 -->
    <update id="acl">
        UPDATE doc
        SET p_read = #{p_read},
        p_update = #{p_update},
        p_delete = #{p_delete}
        WHERE d_num = #{d_num}
    </update>

    <!-- ACL 초기화-->
    <update id="aclwipe">
        UPDATE doc
        SET p_read = 1
        p_update = 2
        p_delete = 2
        WHERE d_num = #{d_num}
    </update>

    <!-- 문서 편집시 역사 새로 삽입 -->
    <insert id="edithistory">
        INSERT INTO doc_history (d_num, d_version, d_date, u_id, d_summary, d_content)
        SELECT #{d_num}, (SELECT IFNULL(MAX(d_version), 0) FROM doc_history WHERE d_num = #{d_num}) + 1, SYSDATE(), #{u_id}, #{d_summary}, #{d_content}
        FROM doc
        WHERE d_num = #{d_num}
    </insert>

    <!-- 문서 삭제  -->
    <update id="delete">
        UPDATE doc
        SET d_available = 0, d_content = '삭제된 문서입니다.'
        WHERE d_num = #{d_num}
    </update>

    <!-- 문서 검색 -->
    <select id="search" resultType="com.spring.cswiki.domain.Doc">
        SELECT d.d_num, d.s_ca_num, d.p_read, d.p_insert, d.p_update, d.p_delete, d.d_title, d.d_content, sc.s_ca_name, b.b_ca_name FROM doc d
        JOIN small_category sc on sc.s_ca_num = d.s_ca_num
        JOIN big_category b on b.b_ca_num = sc.b_ca_num
        WHERE d_title = #{d_title};
    </select>

    <!-- 문서 역사  -->
    <select id="getDocHistory" resultType="com.spring.cswiki.domain.DocHistory">
        SELECT d.d_num, d.d_content, dh.d_version, dh.d_date, dh.d_summary, dh.u_id
        FROM doc d
        JOIN doc_history dh ON d.d_num = dh.d_num
        WHERE d.d_num = #{d_num} AND d_available = 1
        ORDER BY d_date DESC
    </select>

    <!-- 버전별 내용 확인 -->
    <select id="version" resultType="com.spring.cswiki.domain.Doc">
        SELECT d.d_num, d.d_title, d.p_read, d.p_insert, d.p_update, d.p_delete, dh.d_content, dh.d_version, dh.d_date, dh.d_summary, dh.u_id
        FROM doc d
        JOIN doc_history dh ON d.d_num = dh.d_num
        WHERE d.d_num = #{d_num} AND d_available = 1 AND dh.d_version = #{d_version} order by dh.d_version DESC
    </select>

    <!-- 즐겨찾기 등록 -->
    <insert id="starin">
        INSERT INTO star (star, u_id, d_num)
        VALUES (star, #{u_id}, #{d_num})
    </insert>

    <!-- 즐겨찾기 삭제 -->
    <delete id="starout">
        DELETE FROM star
        WHERE u_id = #{u_id} AND d_num = #{d_num}
    </delete>

    <!-- 즐겨찾기 된 문서의 방문정보 출력-->
    <select id="getDocTimeTitle">
        SELECT lastvisit FROM doc WHERE d_title=#{d_title}
    </select>
    <!-- 즐겨찾기 된 문서 출력 -->
    <select id="userstar" resultType="com.spring.cswiki.domain.Doc">
        SELECT * FROM doc WHERE d_num IN (SELECT d_num FROM star WHERE u_id=#{u_id})
    </select>

    <!-- 즐겨찾기 횟수가 가장 많은 문서 출력 -->
    <select id="popular" resultType="com.spring.cswiki.domain.Doc">
        SELECT d.d_num, d.d_title, d.p_read, d.p_insert, d.p_update, d.p_delete, s.star, s.d_num
        FROM doc d
        JOIN (
        SELECT d_num, MAX(star) AS star
        FROM star
        GROUP BY d_num
        ) s ON d.d_num = s.d_num
        ORDER BY s.star DESC;
    </select>

    <!-- 사이드바 카테고리 출력 -->
    <select id="sidebar" resultType="com.spring.cswiki.domain.Doc">
        select b.b_ca_name, sc.s_ca_name, d.d_title from doc d
        join small_category sc on sc.s_ca_num = d.s_ca_num
        join big_category b on b.b_ca_num = sc.b_ca_num;
    </select>

    <!-- 카테고리 테스트 코드 -->
    <!-- 1단계 카테고리 생성 -->
    <insert id="insertFirstCategory">
        INSERT INTO
            (
                id,
                name
            )
            VALUES
        (
            id = #{id}
            ,name = #{name}
            )
    </insert>
    <!-- 2단계 카테고리 생성 -->
    <insert id="insertSecondCategory">
        INSERT INTO
            (
                id,
                name,
                parent_id
            )
            VALUES
        (
            id = #{id}
            ,name = #{name}
            ,parent_id = #{parent_id}
            )
    </insert>
    <!-- 3단계 카테고리(문서 목록) 생성 -->
    <insert id="insertThirdCategory">
        INSERT INTO category
        (
            id
        ,name
        ,parent_id
        ,d_num
        )
        VALUES
            (
                id = #{id}
            ,name = #{name}
            ,parent_id = #{parent_id}
            ,d_num = #{d_num}
            )
    </insert>

    <!-- 2단계 카테고리에 해당하는 문서 목록 가져오기 -->
    <select id="selectByCategoryId" resultType="com.spring.cswiki.domain.Category">
        SELECT parent_id, id, name FROM category WHERE d_num = #{d_num};
    </select>
</mapper>